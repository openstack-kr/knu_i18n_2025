[
  "Fixed a socket leak when clients try to delete a non-SLO as though it were a Static Large Object.",
  "Suppressed ``RemoteDisconnected`` tracebacks.",
  "The tempurl middleware has been updated to return a 503 if storing a token in memcache fails. Third party authentication middlewares are encouraged to also use the new ``raise_on_error`` keyword argument when storing ephemeral tokens in memcache.",
  "Added support for emitting labeled statsd metrics in a variety of formats. Middleware authors should see `the LabeledStatsdClient documentation <https://docs.openstack.org/swift/latest/misc.html#swift.common.statsd_client.LabeledStatsdClient>`__ for more information.",
  "Per-service ``auto_create_account_prefix`` settings are now deprecated and may be ignored in a future release; if you need to use this, please set it in the ``[swift-constraints]`` section of ``/etc/swift/swift.conf``.",
  "Add a ``--drop-prefixes`` flag to swift-account-info, swift-container-info, and swift-object-info. This makes the output between the three more consistent.",
  "New buckets created via the S3 API will now store multi-part upload data in the same storage policy as other data rather than the cluster's default storage policy.",
  "More daemons now support systemd notify sockets.",
  "Erasure coding fixes:",
  "The sharder now correctly identifies and fails audits for shard ranges that overlap exactly.",
  "Stop logging tracebacks in the ``object-replicator`` when it runs out of handoff locations.",
  "Added per-account and per-container reaping delays. These may be used to offer some grace period in which to recover expired objects.",
  "2.25.0",
  "Internal clients now correctly use their configured ``User-Agent`` in backend requests, rather than only using it for logging.",
  "2.31.1",
  "Improved the error message when deleting a bucket that's ever had versioning enabled and still has versions in it.",
  "Fixed issue where bulk requests using xml and expect 100-continue would return a malformed HTTP response.",
  "X-Delete-At computation now uses X-Timestamp instead of system time. This prevents clock skew causing inconsistent expiry data.",
  "Added an option to drop privileges when running the relinker as root.",
  "Add Vary headers for CORS responses.",
  "The ``container-replicator`` now correctly enqueues ``container-reconciler`` work for sharded containers.",
  "Memcache client error-limiting is now configurable. See the ``error_suppression_*`` options in etc/memcache.conf-sample",
  "The improvements to EC reads made in Swift 2.10.0 have also been applied to the reconstructor. This allows fragments to be rebuilt in more circumstances, resulting in faster recovery from failures.",
  "In the ratelimit middleware, account whitelist and blacklist settings have been deprecated and may be removed in a future release. When found, a deprecation message will be logged. Instead of these config file values, set X-Account-Sysmeta- Global-Write-Ratelimit:WHITELIST and X-Account-Sysmeta-Global- Write-Ratelimit:BLACKLIST on the particular accounts that need to be whitelisted or blacklisted. System metadata cannot be added or modified by standard clients. Use the internal client to set sysmeta.",
  "Added a configurable URL base to staticweb, fixing issues when the accessible endpoint isn't known to the Swift cluster (eg http vs https).",
  "In SLO manifests, the `etag` and `size_bytes` keys are now fully optional and not required. Previously, the keys needed to exist but the values were optional. The only required key is `path`.",
  "Added ``ttfb`` (Time to First Byte) and ``pid`` (Process ID) to the set of available proxy-server log fields. For more information, see `the documentation <https://docs.openstack.org/swift/latest/logs.html>`__.",
  "The ``swift-manage-shard-ranges`` tool has a new mode to repair gaps in the namespace.",
  "Removed the use of ``eval`` in the xprofile middleware. Note that this middleware is only intended for development purposes and is not intended for use in production systems.",
  "The sharding progress reports in recon cache now continue to be included for a period of time after sharding has completed. The time period may be configured using the ``recon_sharded_timeout`` option in the ``[container-sharder]`` section of container-server.conf, and defaults to 12 hours.",
  "Fixed an issue where S3 API v4 signatures would not be validated against the body of the request, allowing a replay attack if request headers were captured by a malicious third party.",
  "Object reconstructor logs are now prefixed with information about the specific worker process logging the message. This makes reading the logs and understanding the messages much simpler.",
  "Ring files now include byteorder information about the endian of the machine used to generate the file, and the values are appropriately byteswapped if deserialized on a machine with a different endianness. Newly created ring files will be byteorder agnostic, but previously generated ring files will still fail on different endian architectures. Regenerating older ring files will cause them to become byteorder agnostic. The regeneration of the ring files will not cause any new data movement. Newer ring files will still be usable by older versions of Swift (on machines with the same endianness--this maintains existing behavior).",
  "The standard-library ``logging`` module is no longer monkey-patched when importing ``swift.common.utils``, making it easier to re-use swift code in other contexts.",
  "Improved ``object-updater`` stats logging. It now tells you all of its stats (successes, failures, quarantines due to bad pickles, unlinks, and errors), and it tells you incremental progress every five minutes. The logging at the end of a pass remains and has been expanded to also include all stats.",
  "Prefix-based tempurls may now be used to explore staticweb listings within that prefix. Note that this opens a new ability to list containers from tempurls, but only if staticweb's ``X-Container-Meta-Web-Listings`` is enabled.",
  "Sharding metadata is no longer cleared when databases are deleted. This could previously cause deleted shards that still had rows to become stuck and never move them to the correct database.",
  "WARNING: If you are using the ISA-L library for erasure codes, please upgrade to liberasurecode 1.3.1 (or later) as soon as possible. If you are using isa_l_rs_vand with more than 4 parity, please read https://bugs.launchpad.net/swift/+bug/1639691 and take necessary action.",
  "Deprecation Notes",
  "Added metrics to count skipped, delayed, and assigned tasks as they're enumerated.",
  "Always set Swift processes to use UTC.",
  "Reduced the frequency of ``Reclaimable db stuck waiting for shrinking`` messages when a root DB has been deleted but its shards have not been shrunk away.",
  "User metadata is now exposed via CORS when encryption is enabled, matching the behavior when encryption is not enabled.",
  "EC Fragment Duplication - Foundational Global EC Cluster Support.",
  "Removed per-device reconstruction stats. Now that the reconstructor is shuffling parts before going through them, those stats no longer make sense.",
  "Deleted shard containers are no longer considered root containers. This prevents unnecessary sharding audit failures and allows the deleted shard database to actually be unlinked.",
  "Invalid ``hashes.invalid`` entries are now ignored, rather than causing a complete partition rehash.",
  "Account quotas are now enforced even on empty accounts.",
  "Object writes to a container whose existence cannot be verified now 503 instead of 404.",
  "On Python 3, the formpost middleware now works with unicode file names.",
  "2.13.1-12",
  "S3 API improvements",
  "The container-reconciler now scales out better with new ``processes``, ``process``, and ``concurrency`` options, similar to the object-expirer.",
  "On Python 3, the KMS keymaster now works with secrets stored in Barbican with a ``text/plain`` payload-content-type.",
  "Added an option, ``ratelimit_as_client_error``, to return 429s for rate-limited responses. Several clients/SDKs have seem to support retries with backoffs on 429, and having it as a client error cleans up logging and metrics. By default, Swift will respond 503, matching AWS documentation.",
  "A ``--no-auto-shard`` option has been added to ``swift-container-sharder``.",
  "**If your cluster has encryption enabled and is still running Swift under Python 2**, we recommend upgrading Swift *before* transitioning to Python 3. Otherwise, new writes to objects with non-ASCII characters in their paths may result in corrupted downloads when read from a proxy-server still running old swift on Python 2. See `bug 1888037 <https://bugs.launchpad.net/swift/+bug/1888037>`__ for more information. Note that new tags including a fix for the bug are planned for all maintained stable branches; upgrading to any one of those should be sufficient to ensure a smooth upgrade to the latest Swift.",
  "Added ``--swift-versions`` to ``swift-recon`` CLI to compare installed versions in the cluster.",
  "Added a ``--dry-run`` option for the 'compact' command.",
  "Fixed a server error when downloading multipart uploads/static large objects that have missing or inaccessible segments. This is a state that cannot arise in AWS, so a new ``BrokenMPU`` error is returned, indicating that retrying the request is unlikely to succeed.",
  "Known Issues",
  "New Features",
  "Removed the hard dependency on netifaces; it may still be used if the ``getifaddrs`` C function is not available. This fallback support may be removed in a future release.",
  "Fixed a rare infinite loop in `swift-ring-builder` while placing parts.",
  "Added metrics to the formpost and tempurl middlewares to monitor digest usage in signatures.",
  "Proxy, account, container, and object servers now support \"seamless reloads\" via ``SIGUSR1``. This is similar to the existing graceful restarts but keeps the server socket open the whole time, reducing service downtime.",
  "Fixed using ``swift-ring-builder set_weight`` with more than one device.",
  "Added ``access_user_id`` logging field; out-of-tree auth middlewares should use ``environ['swift.access_logging']['user_id']`` to populate this field.",
  "Hashes are no longer invalidated after a successful ssync; they were already invalidated during the data transfer.",
  "Fixed some SignatureDoesNotMatch errors when using the AWS .NET SDK.",
  "Added an option to rate-limit how quickly data files are relinked or cleaned up. This may be used to reduce I/O load during partition power increases, improving end-user performance.",
  "Swift path and on-disk path are now included with all sharder logging.",
  "With heartbeating turned on, the proxy will start its response immediately with 202 Accepted then send a single whitespace character periodically until the request completes. At that point, a final summary chunk will be sent which includes a ``Response Status`` key indicating success or failure.",
  "SSYNC replication mode now removes as much of the directory structure as possible as soon at it observes that the directory is empty. This reduces the work needed for subsequent replication passes.",
  "The ``swift-drive-audit`` tool now works with ISO timestamps in kernel logs.",
  "The number of container updates on object PUTs (ie to update listings) has been recomputed to be far more efficient  while maintaining durability guarantees. Specifically, object PUTs to erasure-coded policies will now normally result in far fewer container updates.",
  "Account and container info metrics now include the response status code when backend requests are made.",
  "Middleware features:",
  "Sharding improvements",
  "Added a new object versioning mode, with APIs for querying and accessing old versions. For more information, see `the documentation <https://docs.openstack.org/swift/latest/middleware.html#module-swift.common.middleware.versioned_writes.object_versioning>`__.",
  "Optimize the Erasure Code reconstructor protocol to reduce IO load on servers.",
  "If there's a conflict deleting the in-progress-upload marker when completing a multipart-upload, a 503 is now returned to the client, prompting it to retry.",
  "2.13.1",
  "Rocky Series Release Notes",
  "Improved proxy-server performance by reducing unnecessary locking, memory copies, and eventlet scheduling.",
  "Added a new 'repair' command to automatically identify and optionally resolve overlapping shard ranges.",
  "SLO will now concurrently HEAD segments, resulting in much faster manifest validation and object creation. By default, two HEAD requests will be done at a time, but this can be changed by the operator via the new `concurrency` setting in the \"[filter:slo]\" section of the proxy server config.",
  "The dark-data audit watcher now skips objects younger than a new configurable ``grace_age`` period. This avoids issues where data could be flagged, quarantined, or deleted because of listing consistency issues. The default is one week.",
  "formpost can now accept a content-encoding parameter.",
  "Ocata Series Release Notes",
  "Added a new object-expirer configuration option, ``round_robin_task_cache_size``, to adjust the number of tasks to cache before processing. This may be used to trade faster expirer start-up for more lumpy container-server load.",
  "Allow direct_client users to overwrite the ``X-Timestamp`` header.",
  "The S3 ACL and Delete Multiple APIs are now less case-sensitive.",
  "Added ``Accept-Ranges: bytes`` to object responses. Range requests have always been supported; now, that support is properly advertised.",
  "Added the option to tune down ETag validation in the object-server during full-object reads. By default, every full read will continue to have its ETag validated as bytes are streamed to the proxy-server. The ``etag_validate_pct`` option may be used to configure approximately what percentage of full-object reads should be validated; reducing this can improve performance when object-servers are CPU-constrained.",
  "Added support for verifying additional checksums during upload. All algorithms currently supported by AWS are supported: ``CRC64NVME``, ``CRC32``, ``CRC32C``, ``SHA1``, and ``SHA256``. See `Amazon's documentation <https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html>`__. Note that some algorithms require the availability of additional libraries: `ISA-L <https://github.com/intel/isa-l>`__ or `anycrc <https://pypi.org/project/anycrc>`__.",
  "Allow static large object segments to be deleted asynchronously. Operators may opt into this new behavior by enabling the new ``allow_async_delete`` option in the ``[filter:slo]`` section in their proxy-server.conf. For more information, see `the documentation <https://docs.openstack.org/swift/latest/overview_large_objects.html#deleting-a-large-object>`__.",
  "Empty account and container partition directories are now cleaned up immediately after replication, rather than needing to wait for an additional replication cycle.",
  "Added information (including target account/container) from oldest failed updates to recon dumps, both per-device and aggregated for the node. Use the new ``async_tracker_max_entries`` and ``async_tracker_dump_count`` options to adjust how many records to collect.",
  "s3api now mimics the AWS S3 behavior of periodically sending whitespace characters on a Complete Multipart Upload request to keep the connection from timing out. Note that since a request could fail after the initial 200 OK response has been sent, it is important to check the response body to determine if the request succeeded.",
  "Add basic read support for S3 object locking. This improves compatibility with an Ansible S3 module. Write support is not yet implemented, so get-object-lock-configuration will always 404.",
  "WSGI servers now accept a ``--test-config`` option that may be used to validate configuration changes before reloading/restarting the server.",
  "Fixed regression in consolidate_hashes that occured when a new file was stored to new suffix to a non-empty partition. This bug was introduced in 2.7.0 and could cause an increase in rsync replication stats during and after upgrade, due to inconsistent hashing of partition suffixes.",
  "Container sharding deprecations:",
  "The formpost digest algorithm is now configurable via the new ``allowed_digests`` option, and support is added for both SHA-256 and SHA-512. Supported formpost digests are exposed to clients in ``/info``. Additionally, formpost signatures can now be base64 encoded.",
  "2.10.0",
  "Fixed a bug where stale state files would cause misplaced data during multiple partition power increases.",
  "Remove ``swift-temp-url`` script. The functionality has been in swiftclient for a long time and this script has been deprecated since 2.10.0.",
  "2.29.2",
  "The ``container-replicator`` now only attempts to fetch shard ranges if the remote indicates that it has shard ranges. Further, it does so with a timeout to prevent the process from hanging in certain cases.",
  "The dark-data audit watcher now requires that all primary locations for an object's container agree that the data does not appear in listings to consider data \"dark\". Previously, a network partition that left an object node isolated could cause it to quarantine or delete all of its data.",
  "The object-expirer logs fewer client disconnects.",
  "Allow operators to pass either raw or URL-quoted paths to ``swift-get-nodes``. Notably, this allows ``swift-get-nodes`` to work with the reserved namespace used for object versioning.",
  "Fixed an issue where an erasure-coded PUT could prevent other requests from being processed when network calls rarely or never blocked.",
  "Python 3 fixes:",
  "Victoria Series Release Notes",
  "2.19.0",
  "Fixed regression in consolidate_hashes that occurred when a new file was stored to new suffix to a non-empty partition. This bug was introduced in 2.7.0 and could cause an increase in rsync replication stats during and after upgrade, due to inconsistent hashing of partition suffixes.",
  "Removed support for Python 3.6.",
  "The dark-data object audit watcher now works with sharded containers. Previously, it would think that all data files were absent from listings.",
  "Daemons now send ``STOPPING`` and ``RELOADING`` systemd notifications when the service is configured with ``Type=notify``.",
  "Expiring object queue entries now include the size of the object to be expired in the ``swift_expirer_bytes`` parameter of the queue entry's content-type.",
  "The relinker better handles tombstones found for the same object but with different inodes.",
  "Flamingo (2025.2) will be the final stable release to support Python 3.7 and 3.8.",
  "Similar to above, ``expansion_limit`` was added as an absolute-size replacement for the now-deprecated ``shard_shrink_merge_point`` configuration option.",
  "Respond 400 Bad Request when Accept headers fail to parse instead of returning 406 Not Acceptable.",
  "The object-expirer now respects the ``internal_client_conf_path`` configuration option in legacy ``object-expirer.conf`` configs.",
  "2023.1 Series Release Notes",
  "The ``recoverable_node_timeout`` option no longer applies to ``X-Newest`` GET requests.",
  "Added symlink objects support.",
  "s3api now properly handles ``x-amz-metadata-directive`` headers on COPY operations.",
  "Fixed an error in ``invalidate_hash`` when the partition is deleted while waiting for the partition lock.",
  "Data encryption updates",
  "Deleting an expiring object will now cause less work in the system. The number of async pending files written has been reduced for all objects and greatly reduced for erasure-coded objects. This dramatically reduces the burden on container servers.",
  "The ``swift-recon-cron`` tool now better handles missing directories.",
  "When running with ``s3_acl`` disabled, ``bucket-owner-full-control`` and ``bucket-owner-read`` canned ACLs will be translated to the same Swift ACLs as ``private``.",
  "When building a listing from shards, any failure to retrieve listings will result in a 503 response. Previously, failures fetching a partiucular shard would result in a gap in listings.",
  "Add a new ``concurrent_ec_extra_requests`` option to allow the proxy to make some extra backend requests immediately. The proxy will respond as soon as there are enough responses available to reconstruct.",
  "Fixed an issue that prevented proxy servers from emitting metrics and logs for backend requests made when getting account or container info.",
  "Fixed an issue where background consistency daemon child processes would deadlock waiting on the same file descriptor.",
  "Support multi-range GETs for static large objects.",
  "The sharder and swift-manage-shard-ranges now consider total row count (instead of just object count) when deciding whether a shard is a candidate for shrinking.",
  "Fixed listings for sharded containers.",
  "Added an operator tool, ``swift-container-deleter``, to asynchronously delete some or all objects in a container using the object expirers.",
  "Fixed an error when reading encrypted data that was written while running Python 2 for a path that includes non-ASCII characters.",
  "2.30.1",
  "The object reconstructor will now fork all available worker processes when operating on a subset of local devices.",
  "Added support for per-policy proxy config options. This allows per-policy affinity options to be set for use with duplicated EC policies and composite rings. Certain options found in per-policy conf sections will override their equivalents that may be set in the [app:proxy-server] section. Currently the options handled that way are ``sorting_method``, ``read_affinity``, ``write_affinity``, ``write_affinity_node_count``, and ``write_affinity_handoff_delete_count``.",
  "Metrics are now emitted for a variety of S3 error responses, in the form ``s3api.<status_int>.<error_class>[.<reason>]``",
  "When making backend requests, the ``proxy-server`` now ensures query parameters are always properly quoted. Previously, the proxy would encounter an error on Python 2.7.17 if the client included non-ASCII query parameters in object requests. This was previously fixed in 2.23.0.",
  "Allow ``fallocate_reserve`` to be specified as a percentage.",
  "``ENOENT`` and ``ENODATA`` errors are better handled in the object replicator and auditor.",
  "Add support for multiple root encryption secrets for the trivial and KMIP keymasters. This allows operators to rotate encryption keys over time without needing to re-encrypt all existing data in the cluster. Please see the included sample config files for instructions on how to multiple encryption keys.",
  "S3 API compatibility updates",
  "Ussuri Series Release Notes",
  "The EC reconstructor process has been dramatically improved by adding support for multiple concurrent workers. Multiple processes are required to get high concurrency, and this change results in much faster rebalance times on servers with many drives.",
  "``swift_source`` is set for more sub-requests in the proxy-server. See `the documentation <https://docs.openstack.org/swift/latest/logs.html#swift-source>`__.",
  "The S3 API no longer requires a ``Content-MD5`` header for ``DeleteObjects`` requests when using v4 signatures.",
  "Prevent object updates from auto-creating shard containers. This ensures more consistent listings for sharded containers during rebalances.",
  "Fixed a server error when a client exceeds ``client_timeout`` during an upload. Now, a ``RequestTimeout`` error is correctly returned.",
  "Log the correct request type of a subrequest downstream of copy.",
  "Overlapping shrinking shards no longer generate audit warnings; these are expected to sometimes overlap.",
  "When refetching Static Large Object manifests, non-manifest responses are now handled better.",
  "Added a handoffs-only mode.",
  "TempURLs now support a validation against a common prefix. A prefix-based signature grants access to all objects which share the same prefix. This avoids the creation of a large amount of signatures, when a whole container or pseudofolder is shared.",
  "Object versioning now supports a \"history\" mode in addition to the older \"stack\" mode. The difference is in how DELETE requests are handled. For full details, please read http://docs.openstack.org/developer/swift/overview_object_versioning.html.",
  "Cache all answers from nameservers in cname_lookup.",
  "Improved performance of sharded container listings when performing prefix listings.",
  "Reduced the backend load of making ``?versions`` requests to a container that has never had object versioning enabled.",
  "Fixed a bug where an SLO download with a range request may have resulted in a 5xx series response.",
  "If a cluster was deployed with a non-standard account name, operators should remove the option from all configs so they are using a supported configuration going forward, but will need to deploy stand-alone expirer processes with legacy expirer config to clean-up old expiration tasks from the previously configured account name.",
  "Turned off thread-logging when monkey-patching with eventlet. This addresses a potential hang in the proxy-server while logging client disconnects.",
  "Yoga Series Release Notes",
  "For further information see the `docs <https://docs.openstack.org/swift/latest/overview_ring.html#module-swift.common.ring.composite_builder>`__",
  "Fixed a cache invalidation issue related to GET and PUT requests to containers that would occasionally cause object PUTs to a container to 404 after the container had been successfully created.",
  "Fixed logging of IP and port in the proxy-server; in particular, internal clients now correctly log about the replication IP/port.",
  "Remove empty db hash and suffix directories if a db gets quarantined.",
  "The erasure code reconstructor will now shuffle work jobs across all disks instead of going disk-by-disk. This eliminates single-disk I/O contention and allows continued scaling as concurrency is increased.",
  "Log correct status code for conditional requests.",
  "``swift-ring-builder`` improvements",
  "I/O priority is now supported on AArch64 architecture.",
  "2.33.0",
  "2.21.1",
  "Added a ``keep_cache_slo_manifest`` option to the object server to better control whether SLO manifests are dropped from the page cache.",
  "If proxy and object layers can be upgraded independently and proxies can be upgraded quickly:",
  "Fixed time skew when using X-Delete-After.",
  "Upgrade liberasurecode on all proxy servers. Newly-written data will now use new fragments. Note that not-yet-upgraded proxies will not be able to read these newly-written fragments but will instead respond ``500 Internal Server Error``.",
  "Swift can now cache the S3 secret from Keystone to use for subsequent requests. This functionality is disabled by default but can be enabled by setting the ``secret_cache_duration`` in the ``[filter:s3token]`` section of the proxy server config to a number greater than 0.",
  "The object server runs certain IO-intensive methods outside the main pthread for performance. Previously, if one of those methods tried to log, this can cause a crash that eventually leads to an object server with hundreds or thousands of greenthreads, all deadlocked. The fix is to use a mutex that works across different greenlets and different pthreads.",
  "Labeled metrics",
  "During clean-up, stop warning about tombstones that got reaped from the new location but not the old.",
  "Swift-all-in-one Docker images are now built and published to https://hub.docker.com/r/openstackswift/saio. These are intended for use as development targets, but will hopefully be useful as a starting point for other work involving containerizing Swift.",
  "2.23.1",
  "Fixed a bug where zero-byte PUTs would not work properly with \"If-None-Match: \\*\" conditional requests.",
  "Improved error-handling in multi-part range responses.",
  "GET and HEAD requests to a symlink will operate on the referenced object and require appropriate permission in the target container. DELETE and PUT requests will operate on the symlink object itself. POST requests are not forwarded to the referenced object. POST requests sent to a symlink will result in a 307 Temporary Redirect response.",
  "Current (Unreleased) Release Notes",
  "2 for invalid options",
  "Fixed ``rsync`` output parsing.",
  "2.25.1",
  "Ubuntu 18.04 and RDO's CentOS 7 repos package liberasurecode 1.5.0, while Ubuntu 20.04 and RDO's CentOS 8 repos currently package liberasurecode 1.6.0 or 1.6.1. Take care when upgrading major distro versions!",
  "Enabled versioned writes on Dynamic Large Objects (DLOs).",
  "Stein Series Release Notes",
  "Worker process logs will have a bit of information prepended so operators can tell which messages came from which worker. The prefix is \"[worker M/N pid=P] \", where M is the worker's index, N is the total number of workers, and P is the process ID. Every message from the replicator's logger will have the prefix",
  "Object updater observability improvements:",
  "Write-affinity aware object deletion",
  "Errors encountered while validating static symlink targets no longer cause ``BadResponseLength`` errors in the proxy-server.",
  "Added ``usedforsecurity`` annotations for use on FIPS-compliant systems.",
  "Accept a trade off of dispersion for balance in the ring builder that will result in getting to balanced rings much more quickly in some cases.",
  "Errors downloading a Static Large Object that cause a shorter-than-expected response are now logged as 500s.",
  "Shuffle object-updater work. This somewhat reduces the impact a single overloaded database has on other containers' listings.",
  "The object-updater now defers rate-limited updates to the end of its cycle; these deferred updates will be processed (at the limited rate) until the configured ``interval`` elapses. A new ``max_deferred_updates`` option may be used to bound the deferral queue.",
  "Logging improvements",
  "Zed Series Release Notes",
  "Proxy-server fixes:",
  "``swift-recon-cron`` now includes the last time it was run in the recon information.",
  "The tempurl digest algorithm is now configurable, and Swift added support for both SHA-256 and SHA-512. Supported tempurl digests are exposed to clients in ``/info``. Additionally, tempurl signatures can now be base64 encoded.",
  "Correctly handle deleted files with if-none-match requests.",
  "Added container/object listing with prefix to InternalClient.",
  "2.28.1",
  "Several utility scripts now work better on Python 3:",
  "Added a new config option, ``minimum_shard_size``. When scanning for shard ranges, if the final shard would otherwise contain fewer than this many objects, the previous shard will instead be expanded to the end of the namespace (and so may contain up to ``rows_per_shard + minimum_shard_size`` objects). This reduces the number of small shards generated. The default value is ``rows_per_shard / 5``.",
  "Add support to increase object ring partition power transparently to end users and with no cluster downtime. Increasing the ring part power allows for incremental adjustment to the upper bound of the cluster size. Please review the `full docs <https://docs.openstack.org/swift/latest/ring_partpower.html>`__ for more information.",
  "Significant improvements to the api-ref doc available at http://developer.openstack.org/api-ref/object-storage/.",
  "Fixed a server error during GET of a symlink with some proxy pipelines.",
  "The static large object (SLO) middleware now supports including a ``?part-number=<N>`` query parameter to request just part of a large object. This may be used to enable efficient parallel downloads. For more information, see `the documentation <https://docs.openstack.org/swift/latest/overview_large_objects.html#retrieving-a-large-object>`__.",
  "Move listing formatting out to a new proxy middleware named ``listing_formats``. ``listing_formats`` should be just right of the first proxy-logging middleware, and left of most other middlewares. If it is not already present, it will be automatically inserted for you.",
  "Security Issues",
  "Sharding fixes",
  "Fixed ssync's handling of timestamp offsets. Previously, this could cause ssync to fail with a 409 Conflict, causing the transfer to fail and preventing handoffs from clearing.",
  "Correctness improvements",
  "Closed a bug where ssync may have written bad fragment data in some circumstances. A check was added to ensure the correct number of bytes is written for a fragment before finalizing the write. Also, erasure coded fragment metadata will now be validated when read and, if bad data is found, the fragment will be quarantined.",
  "Added an option to write EC fragments with legacy CRC to ensure a smooth upgrade from liberasurecode<=1.5.0 to >=1.6.2. For more information, see `bug 1886088 <https://bugs.launchpad.net/liberasurecode/+bug/1886088>`__.",
  "Improved how containers reclaim deleted rows to reduce locking and object update throughput.",
  "2.35.0",
  "Now Swift will use ``write_affinity_handoff_delete_count`` to define how many local handoff nodes should swift send request to get more candidates for the final response. The default value \"auto\" means Swift will calculate the number automatically based on the number of replicas and current cluster topology.",
  "name_check and cname_lookup keys have been added to `/info`.",
  "S3 API fixes:",
  "Add ``databases_per_second`` to the account-replicator, container-replicator, and container-sharder. This prevents them from using a full CPU core when they are not IO limited.",
  "Fixed a few areas where the ``swiftdir`` option was not respected.",
  "Added support for Python 3.9.",
  "The default for `object_post_as_copy` has been changed to False. The option is now deprecated and will be removed in a future release. If your cluster is still running with post-as-copy enabled, please update it to use the \"fast-post\" method. Future versions of Swift will not support post-as-copy, and future features will not be supported under post-as-copy. (\"Fast-post\" is where `object_post_as_copy` is false).",
  "Improved cache management for account and container responses.",
  "2.23.0",
  "Upgrade Impact: If you upgrade and roll back, you must delete all `hashes.pkl` files.",
  "2.29.1",
  "Cross-account symlinks now store correct account information in container listings. This was previously fixed in 2.22.0.",
  "2.33.1",
  "Added support for create-without-overwrite conditional writes.",
  "Let clients request heartbeats during COPYs by including the query parameter ``heartbeat=on``.",
  "2.30.0",
  "Fixed an issue where an object server failure during a client download could leave an open socket between the proxy and client.",
  "Add slo_manifest_hook callback to allow other middlewares to impose additional constraints on or make edits to SLO manifests before being written. For example, a middleware could enforce minimum segment size or insert data segments.",
  "S3 API now translates ``503 Service Unavailable`` responses to a more S3-like response instead of raising an error.",
  "2025.1 Series Release Notes",
  "and you want to take advantage of faster updates, then do this::",
  "Critical Issues",
  "If your users can tolerate it, consider a read-only rolling upgrade. Before upgrading, enable the `read-only middleware <https://docs.openstack.org/swift/latest/middleware.html#read-only>`__ cluster-wide to prevent new writes during the upgrade. Additionally, stop and disable the object-reconstructor as above. Upgrade normally, then disable the read-only middleware and re-enable and restart the object-reconstructor.",
  "Respect server type for --md5 check in swift-recon.",
  "Added more metrics to the container-server, allowing GET and PUT timings to be broken out for listings, shard range operations, and container creation.",
  "Daemons using InternalClient can now be properly killed with SIGTERM.",
  "The ``domain_remap`` middleware now supports the ``mangle_client_paths`` option. Its default \"false\" value changes ``domain_remap`` parsing to stop stripping the ``path_root`` value from URL paths. If users depend on this path mangling, operators should set ``mangle_client_paths`` to \"True\" before upgrading.",
  "Static Large Object (SLO) manifest may now (again) have zero-byte last segments.",
  "The object reconstructor can now rebuild an EC fragment for an expired object.",
  "Added the ability for reseller admins to set per-policy account quotas by posting metadata of the form ``X-Account-Quota-Bytes-Policy-<policy name>``.",
  "SSYNC connections are now promptly terminated when subrequests timeout.",
  "Certain S3 API headers are now lower case as they would be coming from AWS.",
  "Proxy server fixes:",
  "2024.1 Series Release Notes",
  "Added a ``keepalive_timeout`` option to the proxy server to limit how long to wait for a client to initiate a request, separate from the general ``client_timeout`` option. Note that this requires eventlet 0.33.4 (currently unreleased) or later.",
  "Metrics are now emitted for whether databases used for cleaving were created or already existed, allowing a better understanding of the reason for handoffs in the cluster.",
  "Add Composite Ring Functionality",
  "On upgrade, a node configured with concurrency=N will still handle async updates N-at-a-time, but will do so using only one process instead of N.",
  "Fixed several issues with the prefix, marker, and delimiter parameters that would be mirrored back to clients when listing buckets.",
  "**Dependency updates**: we've increased our minimum supported version of ``cryptography`` to 2.0.2 and ``netifaces`` to 0.8. This is largely due to the difficulty of continuing to test with the old versions.",
  "``swift-account-info`` now supports the ``--sync`` option to display the contents of the incoming and outgoing sync tables, similar to ``swift-container-info``.",
  "Truncate error logs to prevent log handler from running out of buffer.",
  "Dependency update: lxml must be at least 4.2.3.",
  "Multipart upload parts may now be copied from other multipart uploads.",
  "Ring builder output tables better display weights over 1000.",
  "Include ``Vary: Origin`` header when CORS responses vary by origin.",
  "The sharder daemon has been enhanced to better support the shrinking of shards that are no longer required. Shard containers will now discover from their root container if they should be shrinking. They will also discover the shards into which they should shrink, which may include the root container itself.",
  "``swift-recon``",
  "Fixed a server error when using non-ASCII access key IDs.",
  "Fixed an issue when downloading an SLO manifest would hit a recoverable error and attempt to resume from another node. This would manifest as either a pyeclib decode error or an unexpected empty response.",
  "Updated the `hashes.pkl` file format to include timestamp information for race detection. Also simplified hashing logic to prevent race conditions and optimize for the common case.",
  "All background daemons now use the replication network. This allows better isolation between external, client-facing traffic and internal, background traffic. Note that during a rolling upgrade, replication servers may respond with ``405 Method Not Allowed``. To avoid this, operators should remove the config option ``replication_server = true`` from their replication servers; this will allow them to handle all request methods before upgrading.",
  "Instrumented the object-server with labeled metrics. See ``object-server.conf-sample`` for more information.",
  "Added a ``stale_worker_timeout`` configuration option to the WSGI servers. Once this time elapses following a reload, the manager process will issue SIGKILLs to any remaining stale workers.",
  "Fixed an issue where a failed drive could prevent the container sharder from making progress.",
  "More information is now synced to the fresh database when sharding. Previously, a database could lose the fact that it had been marked as deleted.",
  "The bulk extract middleware once again allows clients to specify metadata (including expiration timestamps) for all objects in the archive.",
  "Cleanup is more robust to files and directories being deleted by another process.",
  "Fixed an import-ordering issue in ``swift-dispersion-populate``.",
  "2.10.1",
  "Added a delay before deleting non-durable data. A new configuration option, ``commit_window`` in the ``[DEFAULT]`` section of object-server.conf, adjusts this delay; the default is 60 seconds. This improves the durability of both back-dated PUTs (from the reconciler or container-sync, for example) and fresh writes to handoffs by preventing the reconstructor from deleting data that the object-server was still writing.",
  "Container ACLs are now cloned to the ``+segments`` container when it is created.",
  "2.24.0",
  "Removed a request-smuggling vector when running a mixed py2/py3 cluster.",
  "Ensure that non-durable data and .meta files are purged from handoffs after syncing.",
  "2.34.0",
  "Account and container replication stats logs now include ``remote_merges``, the number of times a whole database was sent to another node.",
  "This is the final stable branch that will support Python 2.7.",
  "2.21.0",
  "Sharding improvements:",
  "Transaction IDs are now only included in daemon log lines in a request/response context.",
  "Include object sysmeta in POST responses. Sysmeta is still stripped from the response before being sent to the client, but this allows middleware to make use of the information.",
  "The KMS keymaster now supports overriding the endpoint returned in the Keystone catalog via the ``barbican_endpoint`` configuration option. This may be useful in multi-region deployments which have multiple endpoints.",
  "Currently the default is still only one process, and no workers. Set ``reconstructor_workers`` in the ``[object-reconstructor]`` section to some whole number <= the number of devices on a node to get that many reconstructor workers.",
  "Object expiration respects the ``expiring_objects_container_divisor`` config option.",
  "Disallow X-Delete-At header values equal to the X-Timestamp header.",
  "Queens Series Release Notes",
  "CompleteMultipartUpload requests may now be safely retried.",
  "Log deprecation warning for ``allow_versions`` in the container server config. Configure the ``versioned_writes`` middleware in the proxy server instead. This option will be ignored in a future release.",
  "Fixed a bug that prevented the s3api pipeline validation described in proxy-server.conf-sample from being performed. As documented, operators can disable this via the ``auth_pipeline_check`` option if proxy startup fails with validation errors.",
  "2.16.0",
  "2.20.0",
  "Fixed an issue where multipart uploads with the S3 API would sometimes report an error despite all segments being upload successfully.",
  "Improved relinker progress logging, and started collecting progress information for swift-recon.",
  "Require that known-bad EC schemes be deprecated",
  "Transaction IDs are included in more error responses.",
  "Correctly send 412 Precondition Failed if a user sends an invalid copy destination. Previously Swift would send a 500 Internal Server Error.",
  "If upgrading from Swift 2.20.0 or Swift 2.19.1 or earlier, set ``meta_version_to_write = 1`` in your keymaster configuration *prior* to upgrading.",
  "More headers are now copied from multi-part upload markers to their completed objects, including ``Content-Encoding``.",
  "Added container sharding, an operator controlled feature that may be used to shard very large container databases into a number of smaller shard containers. This mitigates the issues with one large DB by distributing the data across multiple smaller databases throughout the cluster. Please read the full overview at https://docs.openstack.org/swift/latest/overview_container_sharding.html",
  "For new multipart-uploads via the S3 API, the ETag that is stored will be calculated in the same way that AWS uses. This ETag will be used in GET/HEAD responses, bucket listings, and conditional requests via the S3 API. Accessing the same object via the Swift API will use the SLO Etag; however, in JSON container listings the multipart upload etag will be exposed in a new \"s3_etag\" key. Previously, some S3 clients would complain about download corruption when the ETag did not have a '-'.",
  "TempURLs now support IP range restrictions. Please see https://docs.openstack.org/swift/latest/middleware.html#client-usage for more information on how to use this additional restriction.",
  "Static Large Object sizes in listings for versioned containers are now more accurate.",
  "Fixed a server error when deleting a specific version via the S3 API.",
  "2.13.0",
  "Fixed a bug introduced in 2.15.0 where the object reconstructor would exit with a traceback if no EC policy was configured.",
  "Partition cleanup is more robust, decreasing the likelihood of leaving behind mostly-empty partitions from the old partition power.",
  "Improved container-sync performance when data has already been deleted or overwritten.",
  "Swift Release Notes",
  "Log progress per partition when relinking/cleaning up.",
  "Updated the PyECLib dependency to 1.3.1.",
  "Suppressed the KeyError message when auditor finds an expired object.",
  "The default location is now set to \"us-east-1\". This is more likely to be the default region that a client will try when using v4 signatures.",
  "Improved S3 API compatibility.",
  "**If your cluster has encryption enabled and is still running Swift under Python 2**, we recommend upgrading Swift *before* transitioning to Python 3. Otherwise, new writes to objects with non-ASCII characters in their paths may result in corrupted downloads when read from a proxy-server still running old swift on Python 2. See `bug 1888037 <https://bugs.launchpad.net/swift/+bug/1888037>`__ for more information.",
  "The proxy-server now caches 'listing' shards, improving listing performance for sharded containers. A new config option, ``recheck_listing_shard_ranges``, controls the cache time and defaults to 10 minutes; set it to 0 to disable caching (the previous behavior).",
  "If running Swift under Python 3, ``eventlet`` must be at least 0.25.0.",
  "Object POSTs and chunked PUTs are no longer accepted when the target drive is already past its ``fallocate_reserve``. DELETEs are still allowed.",
  "Fixed non-deterministic suffix updates in hashes.pkl where a partition may be updated much less often than expected.",
  "Make mount_check option usable in containerized environments by adding a check for an \".ismount\" file at the root directory of a device.",
  "Improved quota-exceeded error messages.",
  "Fixed s3v4 signature calculation when the client sends an un-encoded path in the request.",
  "Server errors encountered when validating the first segment of a Static or Dynamic Large Object now return a 503 to the client, rather than a 409.",
  "Fixed a potential server error when getting symlink details.",
  "CORS-related headers are now passed through appropriately when using the S3 API. Note that allowed origins and other container metadata must still be `configured through the Swift API <https://docs.openstack.org/swift/latest/cors.html>`__.",
  "Fixed a performance regression in the handling of misplaced objects.",
  "Log deprecation warnings for ``run_pause``. This setting was deprecated in Swift 2.4.0 and is replaced by ``interval``. It may be removed in a future release.",
  "Added ``-d <devs>`` and ``-p <partitions>`` command line options.",
  "Replication servers can now handle all request methods. This allows ssync to work with a separate replication network.",
  "``X-Open-Expired`` now works properly with ``?part-number`` requests.",
  "Device names are now included in new database IDs. This provides more context when examining incoming/outgoing sync tables or sharding CleaveContexts.",
  "Python 3.11 is now supported.",
  "Separated unlinks-due-to-outdated-updates from unlinks-due-to-fully-processed-updates in logged object-updater stats.",
  "Train Series Release Notes",
  "2.17.0",
  "Added the ability to configure cooperative yielding when servicing GET responses, via the ``cooperative_period`` option. See the example config for more information.",
  "Added ``tasks_per_second`` option to rate-limit the object-expirer.",
  "The backend ratelimiter now supports per-method, per-device ratelimits. See `etc/backend-ratelimit.conf-sample <https://github.com/openstack/swift/blob/master/etc/backend-ratelimit.conf-sample>`__ for more information.",
  "statsd error messages correspond to 5xx responses only. This makes monitoring more useful because actual errors (5xx) will not be hidden by common user requests (4xx). Previously, some 4xx responses would be included in timing information in the statsd error messages.",
  "Fixed a race condition in updating hashes.pkl where a partition suffix invalidation may have been skipped.",
  "2.15.0",
  "Add support for PROXY protocol v1 to the proxy server. This allows the Swift proxy server to log accurate client IP addresses when there is a proxy or SSL-terminator between the client and the Swift proxy server.  Example servers supporting this PROXY protocol include stunnel, haproxy, hitch, and varnish. See the sample proxy server config file for the appropriate config setting to enable or disable this functionality.",
  "2024.2 Series Release Notes",
  "Throttle update_auditor_status calls so it updates no more than once per minute. This prevents excessive IO on a new cluster.",
  "Added \"emergency mode\" hooks in the account and container replicators. These options may be used to prioritize moving handoff partitions to primary locations more quickly. This helps when adding capacity to a ring.",
  "2.32.0",
  "Container read ACLs now work with object versioning. This only allows access to the most-recent version via an unversioned URL.",
  "Exit codes are now applied more consistently:",
  "Prevent sharded root databases from being reclaimed to ensure that shards can detect that they have been deleted.",
  "Fixed ``Content-Type`` and ``Content-Length`` headers in account and container ``HEAD`` responses (with eventlet>=0.38.0).",
  "Fixed a bug where SSYNC would fail to replicate unexpired object.",
  "The object-expirer configuration options ``expiring_objects_container_divisor`` and ``expiring_objects_account_name`` are now deprecated.",
  "Fixed a server error when the Swift request path has missing account or container components.",
  "The relinker can now target specific storage policies or partitions by using the new ``--policy`` and ``--partition`` options.",
  "Added a \"user\" option to the drive-audit config file. Its value is used to set the owner of the drive-audit recon cache.",
  "2.23.2",
  "Partition power increase fixes:",
  "Added an optional ``read_only`` middleware to make an entire cluster or individual accounts read only.",
  "Per-service ``auto_create_account_prefix`` configuration options have been removed. These options were deprecated in favor of ``swift.conf`` configuration in Swift 2.24.0, part of the OpenStack Ussuri release.",
  "Added a ``keep_idle`` config option to configure KEEPIDLE time for TCP sockets. The default value is the old constant of 600.",
  "CompleteMultipartUpload requests with a ``Content-MD5`` now work.",
  "Listing containers in accounts with json or xml now includes a `last_modified` time. This does not change any on-disk data, but simply exposes the value to offer consistency with the object listings on containers.",
  "Metrics improvements:",
  "S3 requests are now less demanding on the container layer.",
  "The post-rsync REPLICATE call no longer recalculates hashes immediately.",
  "On Python 3, fixed an issue when reading or writing objects with a content type like ``message/*``. Previously, Swift would fail to respond.",
  "Python 3.6 and 3.7 are now fully supported. If you've been testing Swift on Python 3, upgrade at your earliest convenience.",
  "Extend concurrent reads to erasure coded policies. Previously, the options ``concurrent_gets`` and ``concurrency_timeout`` only applied to replicated policies.",
  "When object path is not a directory, just quarantine it, rather than the whole suffix.",
  "Improved formatting of meta and sysmeta for ``swift-account-info`` and ``swift-container-info``.",
  "Replication fixes:",
  "Return an error if the SLO manifest could not be parsed. Previously, a zero-byte response was returned.",
  "The account quota middleware now supports object-count quotas in addition to byte-count quotas, similar to the container quota middleware. For more information, see `the documentation <https://docs.openstack.org/swift/latest/middleware.html#module-swift.common.middleware.account_quotas>`__.",
  "Fixed a rare issue where multiple backend timeouts could result in bad data being returned to the client.",
  "If you've been testing Swift on Python 3, upgrade at your earliest convenience.",
  "The above bug was caused by a difference in string types that resulted in ambiguity when decrypting. To prevent the ambiguity for new data, set ``meta_version_to_write = 3`` in your keymaster configuration *after* upgrading all proxy servers.",
  "Added a new 'analyze' command to automatically identify overlapping shard ranges and recommend a resolution based on a JSON listing of shard ranges such as produced by the 'show' command.",
  "The correct storage policy is now logged for S3 requests.",
  "Account, container, and object log fields are now correctly identified when returning ``BadDigest`` responses to S3 requests.",
  "2.11.0",
  "Added the ability to quarantine EC fragments that have no (or few) other fragments in the cluster. A new configuration option, ``quarantine_threshold``, in the reconstructor controls the point at the fragment will be quarantined; the default (0) will never quarantine. Only fragments older than ``quarantine_age`` (default: ``reclaim_age``) may be quarantined. Before quarantining, the reconstructor will attempt to fetch fragments from handoff nodes in addition to the usual primary nodes; a new ``request_node_count`` option (default ``2 * replicas``) limits the total number of nodes to contact.",
  "The proxy-logging middleware now emits timing and transfer stats for more requests such as auth requests. These will be labeled ``UNKNOWN`` rather than ``account``, ``container``, etc.",
  "Added support for system-scoped \"reader\" roles when authenticating using Keystone. Operators may configure this using the ``system_reader_roles`` option in the ``[filter:keystoneauth]`` section of their proxy-server.conf.",
  "Added support for inline data segments in SLO manifests.",
  "Background corruption-detection improvements",
  "Unsigned payloads work with v4 signatures once more.",
  "Note: if you have a custom middleware that makes account or container listings, it will only receive listings in JSON format.",
  "Fixed an issue where v4 signatures would not be validated against the body of the request, allowing a replay attack if request headers were captured by a malicious third party. Note that unsigned payloads still function normally.",
  "Suppress unexpected-file warnings for rsync temp files.",
  "``s3token`` no longer mangles request paths that include the Access Key ID.",
  "Added a ``log_rsync_transfers`` option to the object-replicator. Set it to false to disable logging rsync \"send\" lines; during large rebalances, such logging can overwhelm log aggregation while providing little useful information.",
  "Fixed a socket leak in copy middleware when a large object was copied.",
  "Fix a proxy-server error when retrieving erasure coded data when there are durable fragments but not enough to reconstruct.",
  "Allow the expirer to gracefully move past updating stale work items.",
  "Fixed a bug where a container listing delimiter wouldn't work with encryption.",
  "Using an ``X-Remove-Account-Quota-Bytes-Policy-<policy name>`` header now removes the per-policy quota, rather than reducing it to zero.",
  "Added a new config option, ``shrink_threshold``, to specify the absolute size below which a shard will be considered for shrinking. This overrides the ``shard_shrink_point`` configuration option, which expressed this as a percentage of ``shard_container_threshold``. ``shard_shrink_point`` is now deprecated.",
  "Pickle support has been removed from Swift's memcache client. Support had been deprecated since Swift 1.7.0.",
  "On newer kernels (3.15+ when using xfs), Swift will use the O_TMPFILE flag when opening a file instead of creating a temporary file and renaming it on commit. This makes the data path simpler and allows the filesystem to more efficiently optimize the files on disk, resulting in better performance.",
  "Erasure code GET performance has been significantly improved in clusters that are not completely healthy.",
  "Rings with min_part_hours set to zero will now only move one partition replica per rebalance, thus matching behavior when min_part_hours is greater than zero.",
  "The ``proxy-server`` now ignores 404 responses from handoffs that have no data when deciding on the correct response for object requests, similar to what it already does for account and container requests.",
  "Daemons send object updates via the replication network in more cases.",
  "Improved compatibility with certain FIPS-mode-enabled systems.",
  "2.10.2",
  "S3 API error response reasons are now logged as part of the ``log_info`` field. This can be especially useful when diagnosing HEAD failures, which necessarily have no response body.",
  "Prevent PyKMIP's kmip_protocol logger from logging at DEBUG. Previously, some versions of PyKMIP would include all wire data when the root logger was configured to log at DEBUG; this could expose key material in logs. Only the ``kmip_keymaster`` was affected.",
  "When listing objects in a container in json format, static large objects (SLOs) will now include an additional new \"slo_etag\" key that matches the etag returned when requesting the SLO. The existing \"hash\" key remains unchanged as the MD5 of the SLO manifest. Text and XML listings are unaffected by this change.",
  "The structure of cached shard ranges has changed, improving performance when listing or writing to sharded containers. Note that immediately after upgrade, the new structures will all be cache misses, which may lead to a thundering herd problem. To avoid this, upgrade just a few nodes first, let them service some fraction of traffic to populate the cache, then upgrade the rest of the cluster.",
  "2.27.0",
  "Moved other-requirements.txt to bindep.txt. bindep.txt lists non-python dependencies of Swift.",
  "Enable cluster-wide CORS Expose-Headers setting via \"cors_expose_headers\".",
  "Removed a race condition that could cause newly-written data to not be linked into the new partition for the new partition power.",
  "Removed support for pickled ring files. These have not been written since Swift 1.7.0.",
  "Databases marked deleted are now processed by the sharder.",
  "Container-server logs now include the shard path in the referer field when receiving stat updates.",
  "Fixed an issue with ``swift-drive-audit`` when run around New Year's.",
  "Fixed non-ASCII account metadata handling.",
  "Fixed a bug in the EC reconstructor where an unsuccessful sync would cause extra disk I/O load on the remote server. Now the extra checking work is only requested if the sync request was successful.",
  "Added a new middleware to allow accounts and containers to opt-in to RFC-compliant ETags. For more information, see `the documentation <https://docs.openstack.org/swift/latest/middleware.html#module-swift.common.middleware.etag_quoter>`__. Clients should be aware of the fact that ETags may be quoted for RFC compliance; this may become the default behavior in some future release.",
  "Added support for Python 3.8.",
  "2.14.0",
  "Change the behavior of the EC reconstructor to perform a fragment rebuild to a handoff node when a primary peer responds with 507 to the REPLICATE request. This changes EC to match the existing behavior of replication when drives fail. After a rebalance of EC rings (potentially removing unmounted/failed devices), it's most IO efficient to run in handoffs_only mode to avoid unnecessary rebuilds.",
  "Upgrade Notes",
  "Fixed an issue in COPY where concurrent requests may have copied the wrong data.",
  "Fixed a server error when performing a PUT authorized via tempurl with some proxy pipelines.",
  "Fixed a bug in how Swift uses eventlet that was exposed under high concurrency.",
  "Composite rings support 'cooperative' rebalance which means that during rebalance all component rings will be consulted before a partition is moved in any component ring. This avoids the same partition being simultaneously moved in multiple components.",
  "Drop support for auth-server from common/manager.py and `swift-init`.",
  "Ensure update of the container by object-updater, removing a rare possibility that objects would never be added to a container listing.",
  "Cleaned up logged tracebacks when talking to memcached servers.",
  "The object-expirer now only cleans up empty containers. Previously, it would attempt to delete all processed containers, regardless of whether there were entries which were skipped or had errors.",
  "The concurrent read options (``concurrent_gets``, ``concurrency_timeout``, and ``concurrent_ec_extra_requests``) may now be configured per storage-policy.",
  "Added support for retrieving the encryption root secret from an external key management system. In practice, this is currently limited to Barbican.",
  "Fixed several checksum-related error responses to be more AWS-like.",
  "Large object reads log fewer client disconnects.",
  "Prevent PyKMIP's kmip_protocol logger from logging at DEBUG. Previously, some versions of PyKMIP would include all wire data when the root logger was configured to log at DEBUG; this could expose key material in logs. Only the kmip_keymaster was affected.",
  "A PUT or POST to a container will now update the container's Last-Modified time, and that value will be included in a GET/HEAD response.",
  "The backend ratelimiter now supports dynamic reloading of limits. The new configuration options ``backend_ratelimit_conf_path`` and ``config_reload_interval`` control which file is reloaded and how frequently, respectively.",
  "Rehash partitions during the partition power increase. Previously, we relied on the replication engine to perform the rehash, which could cause an unexpected I/O spike after a partition power increase.",
  "``swift-dispersion-populate``",
  "Container sync now synchronizes static symlinks in a way similar to static large objects.",
  "Instead of using a separate .durable file to indicate the durable status of an EC fragment archive, we rename the .data to include a durable marker in the filename. This saves one inode for every EC .data file. Existing .durable files will not be removed, and they will continue to work just fine.",
  "The ``proxy-server`` now ignores 404 responses from handoffs without databases when deciding on the correct response for account and container requests.",
  "Allow ratelimit to be placed multiple times in a proxy pipeline, such as both before s3api and auth (to handle swift requests without needing to make an auth decision) and after (to limit S3 requests).",
  "Fixed 500 from cname_lookup middleware. Previously, if the looked-up domain was used by domain_remap to update the request path, the server would respond Internal Error.",
  "Multipart object segments are now actually deleted when the multipart object is deleted via the S3 API.",
  "Database replication connections are now closed following an error or timeout. This prevents a traceback in some cases when the replicator tries to reuse the connection.",
  "Fixed a server error when handling conditional GET requests.",
  "Removed a race condition where a POST to an SLO could modify the X-Static-Large-Object metadata.",
  "Fixed a security issue in how ``s3api`` handles XML parsing that allowed authenticated S3 clients to read arbitrary files from proxy servers. Refer to `CVE-2022-47950 <https://cve.circl.lu/cve/CVE-2022-47950>`__ for more information.",
  "S3 ETag for SLOs now include a '-'.",
  "When the object auditor examines an object, it will now add any missing metadata checksums.",
  "We do not yet have CLI tools for creating composite rings, but the functionality has been enabled in the ring modules to support this advanced functionality. CLI tools will be delivered in a subsequent release.",
  "Python 3 bug fixes:",
  "Previously, under some circumstances, a non-standard config option such as ``RECLAIM_AGE`` might get parsed as ``reclaim_age`` for some processes but ignored by others. Now, all config parsing is case-sensitive; non-standard names will always be ignored.",
  "The formpost middleware now works with unicode file names.",
  "Added a configurable URL base to staticweb.",
  "Container metadata related to sharding are now removed when no longer needed.",
  "The object updater now supports two configuration settings: \"concurrency\" and \"updater_workers\". The latter controls how many worker processes are spawned, while the former controls how many concurrent container updates are performed by each worker process. This should speed the processing of async_pendings.",
  "Updated requirements.txt to match global exclusions and formatting.",
  "Note that after writing EC data with Swift 2.11.0 or later, that data will not be accessible to earlier versions of Swift.",
  "Added support for recent versions of eventlet.",
  "Fixed an issue where some but not all fragments having metadata applied could prevent reconstruction of missing fragments.",
  "When the ``+segments`` container's storage policy differs from that of the primary container, completed manifests are now written with the correct policy in the primary container.",
  "Object POSTs now 503 rather than trusting the 404s that might be returned from handoffs when primaries are overloaded.",
  "Fixed multiple issues in s3api involving Multipart Uploads with non-ASCII names.",
  "Swift now returns a 503 (instead of a 500) when an account auto-create fails.",
  "2.15.2",
  "Added a counter metric to the proxy server when caching shard ranges.",
  "Fixed HTTP framing issues when returning errors for a request with ``Expect: 100-continue``.",
  "Fixed an issue with SSYNC requests to ensure that only one request can be running on a partition at a time.",
  "Remove deprecated ``vm_test_mode`` option.",
  "``swift-container-info`` now summarizes shard range information. Pass ``-v``/``--verbose`` if you want to see all of them.",
  "Python 3.13 (with the GIL enabled) is now supported. Free-threaded builds remain untested.",
  "See the provided ``keymaster.conf-sample`` for more information about this setting.",
  "Signal handling is more consistently logged at notice level. Previously, signal handling would sometimes be logged at info or error levels.",
  "Do not follow CNAME when host is in storage_domain.",
  "Fixed UnicodeDecodeError in the object reconstructor that would prevent objects with non-ascii names from being reconstructed and caused the reconstructor process to hang.",
  "The object and container server config option ``slowdown`` has been deprecated in favor of the new ``objects_per_second`` and ``containers_per_second`` options.",
  "Composite rings can be used for explicit replica placement and \"replicated EC\" for global erasure codes policies.",
  "Prevent shard databases from losing track of their root database when deleted.",
  "Several fixes to prepare for Python 3.12 support. While not yet tested in the gate, initial manual testing looks promising.",
  "``EPIPE`` errors no longer log tracebacks.",
  "The staticweb middleware now allows empty listings at the root of a container. Previously, this would result in a 404 response.",
  "Ordinary objects in S3 use the MD5 of the object as the ETag, just like Swift. Multipart Uploads follow a different format, notably including a dash followed by the number of segments. To that end (and for S3 API requests *only*), SLO responses via the S3 API have a literal '-N' added on the end of the ETag.",
  "Upgrade liberasurecode on all object servers. Object servers can now read both old and new fragments.",
  "Save the ring when dispersion improves, even if balance doesn't improve.",
  "Added an experimental ``swift-ring-composer`` CLI tool to build composite rings.",
  "Changed where liberasurecode-devel for CentOS 7 is referenced and installed as a dependency.",
  "2023.2 Series Release Notes",
  "Misplaced-record stats are now also emitted to statsd. Previously, these were only available in logs.",
  "S3 API improvements:",
  "With heartbeating turned on, the proxy will start its response immediately with 202 Accepted then send a single whitespace character periodically until the request completes. At that point, a final summary chunk will be sent which includes a \"Response Status\" key indicating success or failure and (if successful) an \"Etag\" key indicating the Etag of the resulting SLO.",
  "The object-expirer now better handles errors during listings.",
  "Added \"audit watcher\" hooks to allow operators to run arbitrary code against every diskfile in a cluster. For more information, see `the documentation <https://docs.openstack.org/swift/latest/development_watchers.html>`__.",
  "Preflight requests do not contain enough information to map a bucket to an account/container pair; a new cluster-wide option ``cors_preflight_allow_origin`` may be configured for such OPTIONS requests. The default (blank) rejects all S3 preflight requests.",
  "The ``kmip_keymaster`` middleware can now be configured directly in the proxy-server config file. The existing behavior of using an external config file is still supported.",
  "``swift-account-audit``",
  "TempURLs using the \"inline\" parameter can now also set the \"filename\" parameter. Both are used in the Content-Disposition response header.",
  "Account listings now include storage policy information for the containers listed.",
  "Fixed a bug where some headers weren't being copied correctly in a COPY request.",
  "Static large object fixes:",
  "Fixed a potential server error when uploading data via a tempurl.",
  "Device region and zone can now be changed via ``swift-ring-builder``. Note that this may cause a lot of data movement on the next rebalance as the builder tries to reach full dispersion.",
  "O_TMPFILE support is now detected by attempting to use it instead of looking at the kernel version. This allows older kernels with backported patches to take advantage of the O_TMPFILE functionality.",
  "Improved container-sharder stat reporting to reduce load on root container databases.",
  "Requesting multiple ranges from a Dynamic Large Object now returns the entire object instead of incorrect data. This was previously fixed in 2.23.0.",
  "Added a new middleware that allows users and operators to configure accounts and containers to use RFC-compliant (i.e., double-quoted) ETags. This may be useful when using Swift as an origin for some content delivery networks. For more information, see `the middleware documentation <https://docs.openstack.org/swift/latest/middleware.html#etag-quoter>`__.",
  "Getting an SLO manifest with ``?format=raw`` now responds with an ETag that matches the MD5 of the generated body rather than the MD5 of the manifest stored on disk.",
  "Added a proxy-server configuration option: ``allow_open_expired``. This defaults to false; if true, clients may intereact with expired objects by including an ``X-Open-Expired: true`` header in GET, HEAD, or POST requests.",
  "The more-efficient shard range structure from the last release is now used when fetching ranges from the backend.",
  "Erasure code reconstruction handles moving data from handoff nodes better. Instead of moving the data to another handoff, it waits until it can be moved to a primary node.",
  "Non-durable fragments can now be reverted from handoffs.",
  "The proxy server now applies error-limiting to the correct node when handling a recoverable node error.",
  "A composite ring comprises two or more component rings that are combined to form a single ring with a replica count equal to the sum of the component rings. The component rings are built independently, using distinct devices in distinct regions, which means that the dispersion of replicas between the components can be guaranteed.",
  "ACLs now work with unicode in user/account names.",
  "Warn when relinking/cleaning up and any disks are unmounted.",
  "Fixed encoding issue in ssync where a mix of ascii and non-ascii metadata values would cause an error.",
  "Fixed rare socket leak on range requests to erasure-coded objects.",
  "Let clients request heartbeats during SLO PUTs by including the query parameter ``heartbeat=on``.",
  "Update dnspython dependency to 1.14, removing the need to have separate dnspython dependencies for Py2 and Py3.",
  "Expose sharding statistics in the backend recon middleware.",
  "Improved the granularity of the ring dispersion metric so that small improvements after a rebalance can show changes in the dispersion number. Dispersion in existing and new rings can be recalculated using the new ``--recalculate`` option to ``swift-ring-builder``.",
  "``fallocate_reserve`` may be specified as a percentage in more places.",
  "Fixed error where a container drive error resulted in double space usage on rest drives. When drive with container or account database is unmounted, the bug would create handoff replicas on all remaining drives, increasing the drive space used and filling the cluster.",
  "Symlink objects reference one other object. They are created by creating an empty object with an X-Symlink-Target header. The value of the header is of the format <container>/<object>, and the target does not need to exist at the time of symlink creation. Cross-account symlinks can be created by including the X-Symlink-Target-Account header.",
  "Improved the reliability of ``swift-reload``.",
  "Make allowable clock skew configurable, with a default value of 15 minutes to match AWS. Note that this was previously hardcoded at 5 minutes; operators may want to preserve the prior behavior by setting ``allowable_clock_skew = 300`` in the ``[filter:s3api]`` section of their proxy-server.conf.",
  "Fixed a bug in the object replicator that would cause an under-reporting of failures.",
  "Fixed cross-policy object copies. Previously, copied data would always be written using the source container's policy. Now, the destination container's policy will be used, avoiding availability issues and unnecessary container-reconciler work.",
  "Partial reads continue to never have their ETag validated in the object-server. The object-auditor continues to periodically validate every object's ETag.",
  "s3api responses now include a '-' in multipart ETags.",
  "Fixed an issue with logging setup when /dev/log doesn't exist or is not a UNIX socket.",
  "Prevent logged traceback in object-server on client disconnect for chunked transfers to replicated policies.",
  "Stop and disable the object-reconstructor before upgrading. This ensures no upgraded object server starts writing new fragments that old object servers would quarantine.",
  "swift-recon now respects storage policy aliases.",
  "On Python 3, certain S3 API headers are now lower case as they would be coming from AWS.",
  "S3 API",
  "Bug Fixes",
  "If you have a config file like this::",
  "cname_lookup middleware now accepts a ``nameservers`` config variable that, if defined, will be used for DNS lookups instead of the system default.",
  "Improved logging and statsd metrics. Be aware that this will cause an increase in the proxy-logging statsd metrics emited for S3 responses. However, this should more accurately reflect the state of the system.",
  "Fixed an encoding issue when writing non-ASCII object names to sharded containers and shard range caching is not enabled.",
  "On Python 3, fixed a RecursionError in swift-dispersion-report when using TLS.",
  "Detect and remove invalid entries from ``hashes.pkl``",
  "Added the ability to configure auth region in s3token middleware.",
  "All 416 responses will now include a Content-Range header with an unsatisfied-range value. This allows the caller to know the valid range request value for an object.",
  "SLO manifest PUT requests can now be properly validated by sending an ETag header of the md5 sum of the concatenated md5 sums of the referenced segments.",
  "Account and container databases will now be quarantined if the database schema has been corrupted.",
  "The relinker now spawns multiple subprocesses to process disks in parallel. By default, one worker is spawned per disk; use the new ``--workers`` option to control how many subprocesses are used. Use ``--workers=0`` to maintain the previous behavior.",
  "The formpost middleware now properly supports uploading multiple files with different content-types.",
  "Improved safety during cleanup to ensure files have been relinked appropriately before unlinking.",
  "2.17.1",
  "``EIO`` errors during read now cause object diskfiles to be quarantined.",
  "Add basic read support for object tagging. This improves compatibility with AWS CLI version 2. Write support is not yet implemented, so the tag set will always be empty.",
  "Improved proxy-server and object-reconstructor logging when data cannot be reconstructed.",
  "In a rolling upgrade from liberasurecode 1.5.0 or earlier to 1.6.0 or later, object-servers may quarantine newly-written data, leading to availability issues or even data loss. See `bug 1886088 <https://bugs.launchpad.net/liberasurecode/+bug/1886088>`__ for more information, including how to determine whether you are affected. Several mitigations are available to operators:",
  "2.34.1",
  "If a proxy server is configured to autocreate accounts and the account create fails, it will now return a server error (500) instead of Not Found (404).",
  "Overall account byte quotas should now be set with the ``X-Account-Quota-Bytes`` header. The ``X-Account-Meta-Quota-Bytes`` header is now deprecated.",
  "When generating index pages from listings, staticweb now sends an HTML5 doctype. This makes them `PEP 503 <https://peps.python.org/pep-0503/>`__ compliant, allowing their `continued use <https://github.com/pypa/pip/issues/10825>`__ for simple Python package repositories.",
  "Shard ranges with no rows to cleave could previously be left in the CREATED state after cleaving. Now, they are advanced to CLEAVED.",
  "2.19.2",
  "Fixed an issue with the object-reconstructor that would prevent reconstruction of objects with non-ASCII header names.",
  "Improved various error messages to better imitate AWS responses.",
  "Staticweb correctly handles listings when paths include non-ASCII characters.",
  "S3 API now allows multipart uploads with non-ASCII characters in the object name.",
  "Various other minor bug fixes and improvements.",
  "Server workers may now be gracefully terminated via ``SIGHUP`` or ``SIGUSR1``. The parent process will then spawn a fresh worker.",
  "Fixed the KeyError message when auditor finds an expired object.",
  "Replication improvements:",
  "The relinker better handles data found from earlier partition power increases.",
  "Other Notes",
  "Added the ability to connect to memcached over TLS. See the ``tls_*`` options in etc/memcache.conf-sample",
  "Wallaby Series Release Notes",
  "3 for user exit",
  "2.35.1",
  "Object expiry improvements",
  "``Content-Type`` can now be updated when copying an object.",
  "2.15.1",
  "Instrumented proxy-logging with labeled metrics. See ``proxy-server.conf-sample`` for more information.",
  "If you upgrade and roll back, you must delete all `hashes.pkl` files.",
  "A variety of performance improvements have been made for sharded container databases.",
  "Fixed a ``generator already executing`` error on client disconnect.",
  "Fixed a recursion error in the account-quota middleware.",
  "Python 3 object servers can now read unencrypted non-ASCII metadata that was written under Python 2.",
  "A 'compact' command has been added to ``swift-manage-shard-ranges`` that enables sequences of contiguous shards with low object counts to be compacted into another existing shard, or into the root container.",
  "Fixed a server error in bucket listings when ``s3_acl`` is enabled and staticweb is configured for the container.",
  "Removed all ``post_as_copy`` related code and configs. The option has been deprecated since 2.13.0.",
  "Now ``swift-recon-cron`` works with conf.d configs.",
  "The account and container auditors now log and update recon before going to sleep.",
  "Lower bounds of dependencies have been updated to reflect what is actually tested.",
  "Fractional replicas are no longer allowed for erasure code policies.",
  "Partition power increase improvements:",
  "After upgrading, re-enable and restart the object-reconstructor.",
  "Closed a bug where ssync may have written bad fragment data in some circumstances. A check was added to ensure the correct number of bytes is written for a fragment before finalizing the write. Also, erasure coded fragment metadata will now be validated on read requests and, if bad data is found, the fragment will be quarantined.",
  "Experimental support for Python 3.6 and 3.7 is now available. Note that this requires ``eventlet>=0.25.0``. All unit tests pass, and running functional tests under Python 2 will pass against services running under Python 3. Expect full support in the next minor release.",
  "Added \"static symlinks\", which perform some validation as they follow redirects and include more information about their target in container listings. For more information, see the `symlink middleware <https://docs.openstack.org/swift/latest/middleware.html#symlink>`__ section of the documentation.",
  "Deprecate swift-temp-url and call python-swiftclient's implementation instead. This adds python-swiftclient as an optional dependency of Swift.",
  "Added last start time to recon dumps as ``object_updater_last``.",
  "COPY now works with unicode account names.",
  "s3api now uses concurrency (default 2) to handle multi-delete requests. This allows multi-delete requests to be processed much more quickly.",
  "Added a ``swift-reload`` command to assist with safely reloading WSGI servers.",
  "Fixed an issue when reading or writing objects with a content-type like ``message/*``. Previously, Swift would fail to respond.",
  "Imported docs content from openstack-manuals project.",
  "Fixed an issue where resolving overlapping shard ranges via shrinking could prematurely mark created or cleaved shards as active.",
  "Lock timeouts in the container updater are now logged at INFO level, not ERROR.",
  "Fixed an issue where non-ASCII Keystone EC2 credentials would not get mapped to the correct account. This was previously fixed in 2.20.0.",
  "Log formats are now more configurable and include support for anonymization. See the ``log_msg_template`` option in ``proxy-server.conf`` and `the Swift documentation <https://docs.openstack.org/swift/latest/logs.html#proxy-logs>`__ for more information.",
  "Objects with an ``X-Delete-At`` value in the far future no longer cause backend server errors.",
  "Operators should verify that encryption is not enabled in their reconciler pipelines; having it enabled there may harm data durability. For more information, see `bug 1910804 <https://launchpad.net/bugs/1910804>`__.",
  "Provide useful status codes in logs for some versioning and symlink subrequests that were previously logged as 499.",
  "Fixed a bug where the ring builder would not allow removal of a device when min_part_seconds_left was greater than zero.",
  "Fixed v1 listings that end with a non-ASCII object name.",
  "Replaced ``replication_one_per_device`` by custom count defined by ``replication_concurrency_per_device``. The original config value is deprecated, but continues to function for now. If both values are defined, the old ``replication_one_per_device`` is ignored.",
  "The output of devices from ``swift-ring-builder`` has been reordered by region, zone, ip, and device.",
  "Cleaned up ``X-Backend-*`` headers in listing responses.",
  "Include received fragment index in reconstructor log warnings.",
  "The ``cooperative_period`` option for the object-server now affects PUT requests in a way similar to GET responses.",
  "Proxy logging for Complete Multipart Upload requests is now more consistent when requests have been retried.",
  "Server-side copying of erasure-coded data to a replicated policy no longer copies EC sysmeta. The previous behavior had no material effect, but could confuse operators examining data on disk.",
  "The reconciler now defers working on policies that have a partition power increase in progress to avoid issues with concurrent writes.",
  "Fixed deadlock when logging from a tpool thread. The object server runs certain IO-intensive methods outside the main pthread for performance. Previously, if one of those methods tried to log, this can cause a crash that eventually leads to an object server with hundreds or thousands of greenthreads, all deadlocked. The fix is to use a mutex that works across different greenlets and different pthreads.",
  "Fixed an issue where SHA mismatches in client XML payloads would cause a server error. Swift now correctly responds with a client error about the bad digest.",
  "Reduced log noise for common ssync errors.",
  "Improved proxy-to-backend requests to be more RFC-compliant.",
  "Reduced object-replicator and object-reconstructor CPU usage by only checking that the device list is current when rings change.",
  "If using erasure coding with ISA-L in rs_vand mode and 5 or more parity fragments, Swift will emit a warning. This is a configuration that is known to harm data durability. In a future release, this warning will be upgraded to an error unless the policy is marked as deprecated. All data in an erasure code storage policy using isa_l_rs_vand with 5 or more parity should be migrated as soon as possible. Please see https://bugs.launchpad.net/swift/+bug/1639691 for more information.",
  "Multi-character strings may now be used as delimiters in account and container listings.",
  "The EC reconstructor will now attempt to remove empty directories immediately, while the inodes are still cached, rather than waiting until the next run.",
  "``LastModified`` timestamps in listings are now rounded up to whole seconds, like they are in responses from AWS.",
  "Fixed some title-casing of headers.",
  "Mirror X-Trans-Id to X-Openstack-Request-Id.",
  "1 for an unexpected outcome",
  "When requesting objects, return 404 if a tombstone is found and is newer than any data found. Previous behavior was to return stale data.",
  "Fixed some minor test compatibility issues.",
  "Updated docs to reference appropriate ports.",
  "``swift-manage-shard-ranges`` improvements:",
  "Display crypto data/metadata details in swift-object-info.",
  "Developers using Swift's memcache client may now opt in to having a ``MemcacheConnectionError`` be raised when no connection succeeded using a new ``raise_on_error`` keyword argument to ``get``/``set``.",
  "Object server fixes:",
  "WSGI server processes can now notify systemd when they are ready.",
  "Improvements in key parts of the consistency engine",
  "Storage policy definitions in swift.conf can now define the diskfile to use to access objects. See the included swift.conf-sample file for a description of usage.",
  "Servers now open one listen socket per worker, ensuring each worker serves roughly the same number of concurrent connections.",
  "domain_remap now accepts a list of domains in \"storage_domain\".",
  "Empty container databases (such as might be created on handoffs) now shard much more quickly.",
  "Stopped logging tracebacks when receiving an unexpected response.",
  "Improved performance by eliminating an unneeded directory structure hash.",
  "Xena Series Release Notes",
  "Fixed an issue with multi-region EC policies that caused the EC reconstructor to constantly attempt cross-region rebuild traffic.",
  "Optimized the common case for hashing filesystem trees, thus eliminating a lot of extraneous disk I/O.",
  "Ssync no longer corrupts unencrypted non-ASCII metadata during transfers.",
  "The message template for proxy logging may now include a ``{domain}`` field for the client-provided ``Host`` header.",
  "Pike Series Release Notes",
  "Improved object update throughput by shifting some shard range filtering from Python to SQL.",
  "``EUCLEAN`` errors are better handled on the object server.",
  "Add fallocate_reserve to account and container servers. This allows disks shared between account/container and object rings to avoid getting 100% full. The default value of 1% matches the existing default on object servers.",
  "Fixed a bug where the sharder could fail to find a device to use for cleaving.",
  "The container sharder can now handle containers with special characters in their names.",
  "Fixed XML responses (eg on bulk extractions and SLO upload failures) to be more correct. The enclosing \"delete\" tag was removed where it doesn't make sense and replaced with \"extract\" or \"upload\" depending on the context.",
  "``swift-account-info`` and ``swift-container-info`` now accept a ``--sync`` flag to show information from the incoming/outgoing sync tables.",
  "Deployers with clusters that relied on the old implicit default location of \"US\" should explicitly set ``location = US`` in the ``[filter:s3api]`` section of proxy-server.conf before upgrading.",
  "Fewer backend requests are now required when account or container information is missing from memcache.",
  "Avoid upgrading liberasurecode until swift and liberasurecode better-support a rolling upgrade. Swift remains compatible with liberasurecode 1.5.0 and earlier.",
  "Fixed the stats calculation in the erasure code reconstructor.",
  "The erasure code reconstructor `handoffs_first` option has been deprecated in favor of `handoffs_only`. `handoffs_only` is far more useful, and just like `handoffs_first` mode in the replicator, it gives the operator the option of forcing the consistency engine to focus solely on revert (handoff) jobs, thus improving the speed of rebalances.  The `handoffs_only` behavior is somewhat consistent with the replicator's `handoffs_first` option (any error on any handoff in the replicator will make it essentially handoff only forever) but the `handoff_only` option does what you want and is named correctly in the reconstructor.",
  "2025.2 Series Release Notes",
  "**Dependency update**: ``eventlet`` must be at least 0.25.0. This also dragged forward minimum-supported versions of ``dnspython`` (1.15.0), ``greenlet`` (0.3.2), and ``six`` (1.10.0).",
  "``swift-manage-shard-ranges`` can now accept a config file; this may be used to ensure consistency of threshold values with the container-sharder config.",
  "Note that ``secret_id`` values must remain unique across all keymasters in a given pipeline. If they are not unique, the right-most keymaster will take precedence.",
  "Added support for S3 versioning using the above new mode.",
  "Introduced an extensible ring format. This allows both more than 65,536 devices and more data structures to be in a ring. For more information, see `Ring File Formats -- Ring v2 <https://docs.openstack.org/swift/latest/overview_ring_format.html#ring-v2>`__.",
  "PUT subrequests generated from a client-side COPY will now properly log the SSC (server-side copy) Swift source field. See https://docs.openstack.org/developer/swift/logs.html#swift-source for more information.",
  "Fixed an issue that caused Delete Multiple Objects requests with large bodies to 400. This was previously fixed in 2.20.0.",
  "2.19.1",
  "Object expiration fixes:",
  "Added support for aws-chunked transfers. Recent AWS clients recently began defaulting to this mode. See also: `Transferring Payload in Multiple Chunks (Chunked Upload) <https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-streaming.html>`__.",
  "Send ETag header in 206 Partial Content responses to SLO reads.",
  "Add basic support for ?versions bucket listings. We still do not have support for toggling S3 bucket versioning, but we can at least support getting the latest versions of all objects.",
  "Fixed a bug in the new object versioning API that would cause more than ``limit`` results to be returned when listing.",
  "Newton Series Release Notes",
  "The ``proxy-server`` now caches 'updating' shards, improving write performance for sharded containers. A new config option, ``recheck_updating_shard_ranges``, controls the cache time; set it to 0 to disable caching.",
  "Errors encountered while validating static symlink targets no longer cause BadResponseLength errors in the proxy-server.",
  "Added the ability to read options from object-server.conf, similar to background daemons.",
  "Added timing metrics to the container sharder for various operations.",
  "Erasure-coded storage policies using ``isa_l_rs_vand`` and ``nparity`` >= 5 must be configured as deprecated, preventing any new containers from being created with such a policy. This configuration is known to harm data durability. Any data in such policies should be migrated to a new policy. See See `Launchpad bug 1639691 <https://bugs.launchpad.net/swift/+bug/1639691>`__ for more information.",
  "Sharding fixes:",
  "Improve performance when increasing partition power.",
  "Added support for aws-chunked transfers. Recent AWS clients recently began defaulting to this mode. See `Amazon's documentation <https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-streaming.html>`__.",
  "Misplaced tombstone records are now properly cleaved.",
  "If the sharder encounters shard range gaps while cleaving, it will now log an error and halt sharding progress. Previously, rows may not have been moved properly, leading to data loss.",
  "2.23.3",
  "Provide an S3 API compatibility layer. The external \"swift3\" project has been imported into Swift's codebase as the \"s3api\" middleware.",
  "Upgrade impact -- during a rolling upgrade, an updated proxy server may write a manifest that an out-of-date proxy server will not be able to read. This will resolve itself once the upgrade completes on all nodes.",
  "Fixed an encoding issue when handling non-ASCII account names.",
  "2.36.0",
  "If you want updates to be processed exactly as before, do this::",
  "Added a new config option, ``rows_per_shard``, to specify how many objects should be in each shard when scanning for ranges. The default is ``shard_container_threshold / 2``, preserving existing behavior.",
  "The ``object-expirer`` may now be configured in ``object-server.conf``. This is in anticipation of a future change to allow the ``object-expirer`` to be deployed on all nodes that run the ``object-server``.",
  "SHA-1 signatures are now deprecated for the formpost and tempurl middlewares. At some point in the future, SHA-1 will no longer be enabled by default; eventually, support for it will be removed entirely.",
  "Fixed an issue where deleted EC objects didn't have their on-disk directories cleaned up. This would cause extra resource usage on the object servers.",
  "Fixed a bug where encryption would store the incorrect key metadata if the object name starts with a slash.",
  "Errors when setting keys in memcached are now logged. This helps operators detect when shard ranges for caching have gotten too large to be stored, for example.",
  "Add checksum to object extended attributes.",
  "Fix an error in the proxy server when finalizing data.",
  "Fixed a bug where some tombstone files might never be reclaimed.",
  "Don't inject shard ranges when user quits.",
  "Python 3.12 is now supported.",
  "Throttle update_auditor_status calls so it updates no more than once per minute.",
  "s3api now mimics some forms of AWS server-side encryption based on whether Swift's at-rest encryption functionality is enabled. Note that S3 API users are now able to know more about how the cluster is configured than they were previously, ie knowledge of encryption at-rest functionality being enabled or not.",
  "The relinker now performs eventlet-hub selection the same way as other daemons. In particular, ``epolls`` will no longer be selected, as it seemed to cause occassional hangs.",
  "Added a ``--includes`` option for the 'show' command to only output shard ranges that may include a given object name.",
  "Account and container replicators can now be configured with a ``handoff_delete`` option, similar to object replicators and reconstructors. See the sample config for more information.",
  "Fixed a bug in domain_remap when obj starts/ends with slash.",
  "Removed use of the deprecated cgi module.",
  "A new ``item_size_warning_threshold`` option may be used to monitor for values that are approaching the limit of what can be stored in memcache. See the memcache sample config for more information.",
  "Shards no longer report stats to the root database when they are in the ``CREATED`` state.",
  "0 for success",
  "Prevent resets of a shard range's epoch.",
  "Constant-time string comparisons are now used when checking S3 API signatures.",
  "Removed \"in-process-\" from func env tox name to work with upstream CI.",
  "As a result, some errors that previously resulted in exit code 2 will now exit with code 1.",
  "Uploads to containers with object versioning enabled now require a ``Content-Length`` or ``Transfer-Encoding: chunked`` header, similar to other containers.",
  "Added a ``ring_ip`` option for various object services. This may be used to find own devices in the ring in a containerized environment where the ``bind_ip`` may not appear in the ring at all.",
  "Multiple keymaster middlewares are now supported. This allows migration from one key provider to another.",
  "Object expiration improvements:",
  "Sharding cycle time and last-completion time are now available via swift-recon.",
  "2.12.0",
  "Various other minor bug fixes.",
  "Fixed deadlock when logging from a tpool thread.",
  "Display more info on empty rings.",
  "Region name config option is now respected when configuring S3 credential caching.",
  "Add root containers with compactible ranges to recon cache.",
  "2.22.0",
  "During rebalances, clients should no longer get 404s for data that exists but whose replicas are overloaded.",
  "Added a new ``swift.proxy_logging_status`` request environment key that middlewares may use to override the logged status for a request.",
  "Fixed a bug that could cause EC GET responses to return a server error.",
  "``swift-drive-recon``",
  "Added support for verifying additional checksums during upload. All algorithms currently supported by AWS are supported: CRC64NVME, CRC32, CRC32C, SHA1, and SHA256. See also: `Checking object integrity in Amazon S3 <https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html>`__. Note that some algorithms require the availability of additional libraries: ISA-L or anycrc.",
  "Client disconnects should always be logged within the context of the appropriate client request. Previously, there were some cases where logging would occur during general garbage collection, leading to incorrect or missing transaction IDs in logs.",
  "When looking for the active root secret, only the right-most keymaster is used.",
  "Previously, when deleting objects in multi-region swift deployment with write affinity configured, users always get 404 when deleting object before it's replicated to appropriate nodes.",
  "**If your cluster is configured with a separate replication network**, note that background daemons will switch to using this network for all traffic. If your account, container, or object replication servers are configured with ``replication_server = true``, these daemons may log a flood of ``405 Method Not Allowed`` messages during a rolling upgrade. To avoid this, comment out the option and restart replication servers before upgrading.",
  "Fixed a race condition in ssync that could lead to a loss of data durability (or even loss of data, for two-replica policies) when some object servers have outdated rings. Replication via rsync is likely still affected by a similar bug.",
  "New config variables to change the schedule priority and I/O scheduling class. Servers and daemons now understand `nice_priority`, `ionice_class`, and `ionice_priority` to schedule their relative importance. Please read http://docs.openstack.org/developer/swift/deployment_guide.html for full config details.",
  "Fixed a path-rewriting bug introduced in Python 3.7.14, 3.8.14, 3.9.14, and 3.10.6 that could cause some ``domain_remap`` requests to be routed to the wrong object.",
  "Allow proxy-logging middlewares to be configured more independently.",
  "The ETag-quoting middleware no longer raises TypeErrors.",
  "Moved Zuul v3 tox jobs into the Swift code repo.",
  "The object-replicator now logs successful rsync transfers at debug instead of info.",
  "Internal client no longer logs object DELETEs as status 499.",
  "2.18.0",
  "The container-updater now reports zero objects and bytes used for child DBs in sharded containers. This prevents double-counting in utilization reports.",
  "Various logging and metrics improvements when talking to memcache.",
  "2.28.0",
  "Partitions that encountered errors during relinking are no longer marked as completed in the relinker state file. This ensures that a subsequent relink will retry the failed partitions.",
  "Fix SLO delete for accounts with non-ASCII names.",
  "2.26.0",
  "Include more information in shard-replication warnings.",
  "A comparable group, ``.reseller_reader``, is now available for development purposes when authenticating using tempauth.",
  "The S3 API middleware now supports the ``?partNumber=<N>`` query parameter, enabling parallel downloads.",
  "Container sync can now copy SLOs more efficiently by allowing the manifest to be synced before all of the referenced segments. This fixes a bug where container sync would not copy SLO manifests.",
  "The 'compact' command now outputs the total number of compactible sequences.",
  "Add a multiprocess mode to the object replicator. Setting the ``replicator_workers`` setting to a positive value N will result in the replicator using up to N worker processes to perform replication tasks. At most one worker per disk will be spawned.",
  "Temporary URLs now support one common form of ISO 8601 timestamps in addition to Unix seconds-since-epoch timestamps. The ISO 8601 format accepted is '%Y-%m-%dT%H:%M:%SZ'. This makes TempURLs more user-friendly to produce and consume.",
  "tempauth user names now support unicode characters.",
  "Fixed an issue with the container-reconciler that could cause reconciler databases to have conflicting rows that could not be resolved.",
  "Added a new optional proxy-logging field ``{wire_status_int}`` for the status code returned to the client. For more information, see `the documentation <https://docs.openstack.org/swift/latest/logs.html#proxy-logs>`__.",
  "Fixed an issue where non-base64 signatures would cause a server error. Swift now correctly responds with a client error about the invalid digest."
]